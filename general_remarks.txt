Lab 4 Grading and mark allocation:

To run the grading script use: 
./script.sh 1> stdout.csv
# Expects zip files in a folder ./submissions/
# Expects grader files in ./grading-ex1/

Error codes published by each testcase:
1	Incorrect output
3	Did not munmap memory in shmheap_disconnect
5	Did not munmap memory in shmheap_destroy
99	Compilation error
101	Detected bookkeeping space size out of range
102	Detected bookkeeping space not a multiple of 8 bytes
103	Error when detecting bookkeeping space (probably process crashed)
134	Process terminated with SIGABRT, probably an assertion failed
135	Process terminated with SIGBUS (bus error), probably tried to access mapped memory when the underlying file was not long enough
137	Time limit exceeded (probably a child process got a segmentation fault)
139	Process terminated with SIGSEGV (segmentation fault)


Ex1 (2 marks):
There are two test cases - one with a single child and one with ten children.  The runner is augmented to ensure that mmap gives different addresses and check that munmap is called in shmheap_disconnect and shmheap_destroy.  Each test case is graded three times:
(1) once with the augmented grader above
(2) once with the above grader, but does not check that munmap is called
(3) once with the above grader, but does not ensure that mmap gives different addresses
Mark allocation:
Single child test case with grader (2): 1 mark
Ten children test case with grader (2): 1.5 marks
Single child test case with grader (3): 0.5 marks
Ten children test case with grader (3): 1 mark
Single child test case with grader (1): 1 mark
Ten children test case with grader (1): 2 marks
Your score for Ex1 is the maximum of the above 6 results.

Most students were able to do Ex1 correctly, but some students got segmentation faults.  A common mistake is to store pointers in the shmheap_object_handle, which would make them invalid when sent to a different process that has the shared memory mapped to a different address.  A few students stored the base pointer as well as the object pointer in the shmheap_object_handle, which is unnecessary (but we do not deduct marks if the code still functions correctly).  The intended solution simply stores the offset between the base pointer and the object pointer.  Some students also had bugs related to C pointer arithmetic, for example some stored the base pointer as a `size_t*`, and wrongly assumed that `(size_t*)ptr - base` is the number of bytes between base and ptr.

Ex2 (3 marks):
There are 3 test cases, generated randomly using fixed seeds - the first test case has 20 commands, the second test case has 100 commands, and the third test case has 1000 commands.  The runner is augmented to ensure that mmap gives different addresses and check that munmap is called in shmheap_disconnect and shmheap_destroy.   Each test case is graded four times:
(1) once with the augmented grader above
(2) once with the above grader, but does not check that munmap is called
(3) once with the above grader, but does not ensure that mmap gives different addresses
(4) once with the augmented grader above, but with a slightly modified test case that ensures the following:  when shmheap_alloc is called, it will never request for an amount of space such that the remaining free space in the free node being allocated is not more than the size of a bookkeeping space (see example below)
Mark allocation:
20 command test case with grader (4): 1 mark
100 command test case with grader (4): 1.5 marks
1000 command test case with grader (4): 2 marks
20 command test case with grader (2): 1.5 marks
100 command test case with grader (2): 2 marks
1000 command test case with grader (2): 2.5 marks
20 command test case with grader (3): 0.5 marks
100 command test case with grader (3): 1 mark
1000 command test case with grader (3): 1.5 marks
20 command test case with grader (1): 2 marks
100 command test case with grader (1): 2.5 mark
1000 command test case with grader (1): 3 marks
Your score for Ex2 is the maximum of the above 12 results.

Quite a number of students had implementations that did not work when different process map the shared memory to different addresses.  Usually, this involved the storage of pointers in the linked list.  Such implementations were usually able to pass the sample test case with the runner that we provided because the kernel tries to map memory at the same address when possible.  (The augmented runner that we used for grading will first mmap some dummy memory that will never be used, to block out the 'default' virtual address that the kernel tries to give.)  A correct implementation would store relative values (such as the size of the current node or the offset from the base of the shared memory) instead of absolute addresses.

Some students did not consider the case where shmheap_alloc requests for an amount of memory such that the remaining free space in the chosen block is less than the size of the bookkeeping space.  Grader (4) is designed not to trigger this bug.  For example, say the bookkeeping space is 16 bytes, and there is a free space of size 64 bytes (inclusive of bookkeeping space).  If shmheap_alloc is called and requests for 40 bytes of space, then we need a block of at least 40+16=56 bytes.  Suppose the 64-byte block is chosen, so we have 64-56=8 bytes remaining.  Since 8 bytes is insufficient to place a new bookkeeping space, you should not split the 64-byte block (i.e. you should give all the available 64-16=48 bytes to the caller).  However, some students split the block into a 56-byte block and an 8-byte block, which corrupts the linked list when they write the 16-byte bookkeeping to the beginning of the 8-byte block (thereby overwriting the bookkeeping of the subsequent block).  Note: For all test cases, we ensured that the remaining free space in a block will never be equal to the size of a bookkeeping space - we allow implementations to differ on whether a block that contains 0 bytes of usable space should be allowed.

Some students also did not implement merging properly in shmheap_free.  There were various bugs here, which led to blocks being improperly merged in certain situations (e.g. when the previous block is not free, but the following block is free).  Some implementations also did not mark the block as 'free' properly in certain situations.

A few students did not adhere to the bookkeeping size requirements (at most 80 bytes for the first bookkeeping space, and at most 16 bytes for subsequent bookkeeping spaces), or allocated objects at addresses that were not 8-byte aligned.

Ex3 (1 mark):
To minimise double-penalising for bugs that occured in Ex2, we used a grader that does not check for munmap and does not allocate dummy shared memory.  All objects allocated in ex3 are also fixed at 32 bytes.  The grader spawns N child processes, and gets the child processes to call shmheap_alloc and shmheap_free in parallel, in five stages (each stage is separated by a barrier that synchronises all processes).
Mark allocation:
N=20: 0.5 marks
N=100: 0.5 marks
N=200: 1 mark
Your score for Ex3 is the maximum of the above 3 results.

The intended solution is to place a semaphore (or mutex) in the first bookkeeping space, call sem_wait at the beginning of shmheap_alloc and shmheap_free, and call sem_post at the end of shmheap_alloc and shmheap_free.

Most students who attempted this exercise with semaphores or mutexes got the mark unless their code raised a segmentation fault.

